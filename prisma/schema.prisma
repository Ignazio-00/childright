// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator erd {
    provider = "prisma-erd-generator"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id])

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    calculatorStep CalculatorStepData?
    profileStep    ProfileStepData?

    mother   ParentData? @relation("Mother", fields: [motherId], references: [id])
    motherId String?

    father   ParentData? @relation("Father", fields: [fatherId], references: [id])
    fatherId String?

    siblings SiblingData[]

    ResultsData ResultsData[]

    forumComments       ForumComment[]
    CalculatorStepEmail CalculatorStepEmail[]

    chatMessagesSent     ChatMessage[] @relation("fromUser")
    chatMessagesReceived ChatMessage[] @relation("toUser")

    @@index([fatherId])
    @@index([motherId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model CalculatorStepData {
    parentsNetIncome  Float
    kreditRates       Float
    children0to5      Int
    children6to13     Int
    children14to17    Int
    childrenAbove18   Int
    claimAmountResult Float //calculated

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique
}

enum EducationSituation {
    searching
    studying
    formation
    none
}

// TODO: Add LivingSituation for Parents 
enum LivingSituation {
    alone
    withPartner
    withChildren
    withParents
    withOther
}

enum FamilyState {
    married
    single
    divorced
    widowed
}

enum Degree {
    none
    hauptschule
    realschule
    abitur
    studying
    bachelor
    master
}

enum Income {
    none
    work
    other
}

model ProfileStepData {
    name            String
    username        String
    birthDate       DateTime
    address         String
    education       EducationSituation
    livingSituation LivingSituation
    familyState     FamilyState
    degree          Degree
    ownIncome       Income
    ownIncomeAmount Float
    avatarSeed      String
    coachAvatarSeed String

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique
}

model ParentData {
    id String @id @default(cuid())

    name            String
    birthDate       DateTime
    address         String
    livingSituation LivingSituation
    familyState     FamilyState
    degree          Degree
    income          Income
    incomeAmount    Float
    avatarSeed      String

    motherOf User[] @relation("Mother")
    fatherOf User[] @relation("Father")
}

model SiblingData {
    id String @id @default(cuid())

    name            String
    birthDate       DateTime
    livingSituation LivingSituation
    address         String
    degree          Degree
    income          Income
    incomeAmount    Float
    education       EducationSituation
    avatarSeed      String

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique
}

model ResultsData {
    ownAmount Float

    userId String @id @unique
    User   User   @relation(fields: [userId], references: [id])
}

model ForumComment {
    id      String  @id @default(cuid())
    title   String?
    message String
    upvotes Int     @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    parent   ForumComment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parentId String?
    children ForumComment[] @relation("ParentChild")

    @@index([userId])
    @@index([parentId])
}

model CalculatorStepEmail {
    id String @id @default(cuid())
    to String

    sendDate DateTime
    sent     Boolean  @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    User   User   @relation(fields: [userId], references: [id])
    userId String

    @@index([userId])
}

model ChatMessage {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    from   User   @relation("fromUser", fields: [fromId], references: [id], onDelete: Cascade)
    fromId String

    to   User   @relation("toUser", fields: [toId], references: [id], onDelete: Cascade)
    toId String

    @@index([fromId])
    @@index([toId])
}
